(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{369:function(_,v,t){"use strict";t.r(v);var a=t(3),r=Object(a.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("p",[_._v("所谓“三高”，即：高可用、高并发、高性能；实现三高可用的思路一般有：集群部署、分布式集群等，其中会用到负载均衡技术")]),_._v(" "),v("p",[_._v("中小型 Web 应用（日 PV＜1000 万），Nginx 完全够用；集群部署，可以用 DNS 轮询；大型网站或重要服务，且服务器较多时， 可以考虑用 LVS")]),_._v(" "),v("ul",[v("li",[_._v("前端采用 Nginx/HAProxy+Keepalived 作负载均衡器")]),_._v(" "),v("li",[_._v("后端采用 MySQL 数据库一主多从和读写分离，采用 LVS+Keepalived 的架构")])]),_._v(" "),v("h2",{attrs:{id:"一、负载均衡"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、负载均衡"}},[_._v("#")]),_._v(" 一、负载均衡")]),_._v(" "),v("p",[_._v("负载均衡 （Load Balancing） 建立在现有网络结构之上，它提供了一种廉价有效透明的方法扩展网络设备和服务器的带宽、增加吞吐量、加强网络数据处理能力，同时能够提高网络的灵活性和可用性。")]),_._v(" "),v("h3",{attrs:{id:"_1-硬件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-硬件"}},[_._v("#")]),_._v(" 1.硬件")]),_._v(" "),v("p",[_._v("常用的硬件有"),v("code",[_._v("F5")]),_._v("和"),v("code",[_._v("Array")]),_._v("等商用负载均衡器，它的优点就是有专业的维护团队来对这些服务进行维护、缺点就是花销太大，对于规模较小的网络服务完全没有必要。")]),_._v(" "),v("h3",{attrs:{id:"_2-软件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-软件"}},[_._v("#")]),_._v(" 2.软件")]),_._v(" "),v("p",[_._v("目前使用最为广泛的负载均衡软件是 Nginx、LVS、HAProxy。")]),_._v(" "),v("h4",{attrs:{id:"_2-1-nginx"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-nginx"}},[_._v("#")]),_._v(" 2.1.Nginx")]),_._v(" "),v("p",[_._v("轻量级，工作在第七层，可以针对 http、email 应用做一些分流策略（如针对域名、目录结构），带缓存功能，正则表达式比较灵活，比 HAProxy 强大。\n对网络稳定性的依赖非常小，理论上能 ping 通就能进行负载功能\n能把错误用日志打印出来\n硬件不差的情况下一般能支撑几万次的并发量")]),_._v(" "),v("h4",{attrs:{id:"_2-2-lvs"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-lvs"}},[_._v("#")]),_._v(" 2.2.LVS")]),_._v(" "),v("p",[_._v("重量级，使用 Linux 内核集群实现一个高性能、高可用的负载均衡服务器，具有很好的可伸缩性（Scalability)、可靠性（Reliability)和可管理性（Manageability)；工作在第四层，几乎可以对所有应用做负载均衡，包括 http、数据库、在线聊天室等。\n工作稳定，因为其本身抗负载能力很强，自身有完整的双机热备方案，如 LVS+KeepAlived")]),_._v(" "),v("h4",{attrs:{id:"_2-3-haproxy"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-haproxy"}},[_._v("#")]),_._v(" 2.3.HAProxy")]),_._v(" "),v("p",[_._v("模拟四层转发，较灵活")]),_._v(" "),v("h2",{attrs:{id:"二、方案"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二、方案"}},[_._v("#")]),_._v(" 二、方案")]),_._v(" "),v("h3",{attrs:{id:"_1-指标"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-指标"}},[_._v("#")]),_._v(" 1.指标")]),_._v(" "),v("p",[_._v("从字面上理解，高并发就是在某一时刻产生大量的请求；但是由于不同的业务处理复杂度不一样，它无法被量化；因此只能根据业务实际情况选择不同的技术手段，从而提升应用系统的处理能力。")]),_._v(" "),v("ul",[v("li",[_._v("每秒处理事务数（TPS）")])]),_._v(" "),v("p",[_._v("每秒能够处理的事务数，其中T(Transactions)可以定义不同的含义，它可以是完整的一笔业务，也可以是单个的接口请求。")]),_._v(" "),v("ul",[v("li",[_._v("每秒请求数（RPS）")])]),_._v(" "),v("p",[_._v("每秒请求数量，也可以叫做QPS，但它与TPS有所不同，前者注重请求能力，后者注重处理能力。不过，若所有请求都在得到响应后再次发起，那么RPS基本等于TPS。")]),_._v(" "),v("ul",[v("li",[_._v("响应时长（RT）")])]),_._v(" "),v("p",[_._v("从发出请求到得到响应的耗时，一般可以采用毫秒单位来表示，而在一些对RT比较敏感的业务场景下，可以使用精度更高的微秒来表示。")]),_._v(" "),v("ul",[v("li",[_._v("并发用户数（VU）")])]),_._v(" "),v("p",[_._v("同时请求的用户数，很多人将它与并发数画上等号，但两者稍有不同，前者关注客户端，后者关注服务端，除非每个用户仅发送一笔请求，且请求从客户端到服务端没有延迟，同时服务端有足够的处理线程。")]),_._v(" "),v("p",[_._v("以上是些常用的性能指标，不能单一追求某一项的数值，应该根据"),v("strong",[_._v("木桶原理")]),_._v("综合来看\n任何方案无外乎"),v("strong",[_._v("开源 & 节流")]),_._v("：性能再好，储备再多总会有尽头的时候，那就得考虑节流，也就是对客户端做限制")]),_._v(" "),v("h3",{attrs:{id:"_2-限流"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-限流"}},[_._v("#")]),_._v(" 2.限流")]),_._v(" "),v("p",[_._v("在一个时间窗口内，对请求进行速率控制，若请求达到设定的阈值，对请求进行排队或直接拒绝；常用的限流算法有两种：漏桶算法和令牌桶算法。")]),_._v(" "),v("h3",{attrs:{id:"_3-降频"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-降频"}},[_._v("#")]),_._v(" 3.降频")]),_._v(" "),v("p",[_._v("在一个时间窗口内，对同一特征的请求进行速率控制，若请求达到设定的阈值，则拒绝")]),_._v(" "),v("h3",{attrs:{id:"_4-降级"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-降级"}},[_._v("#")]),_._v(" 4.降级")]),_._v(" "),v("p",[_._v("当然所有的方案都是为了让应用系统存活下来，稳定运行；因此不存在完美的方案，得按实际情况进行取舍")]),_._v(" "),v("h2",{attrs:{id:"三、lvs"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三、lvs"}},[_._v("#")]),_._v(" 三、LVS")]),_._v(" "),v("p",[_._v("Linux Virtual Server，Linux 虚拟服务器，主要使用集群技术实现和 Linux 操作系统实现一个高性能、高可用的服务器虚拟的服务器集群系统；当服务日 1000-2000W PV 或并发请求 1W 以下都可以用 Nginx，并发超过了，就要使用 LVS")]),_._v(" "),v("h3",{attrs:{id:"_1-组成部分"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-组成部分"}},[_._v("#")]),_._v(" 1.组成部分")]),_._v(" "),v("h4",{attrs:{id:"_1-1-负载调度器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-负载调度器"}},[_._v("#")]),_._v(" 1.1.负载调度器")]),_._v(" "),v("p",[_._v("整个集群对外面的前端机，负责将客户的请求发送到一组服务器上执行，而客户认为服务是来自同一个 IP（VIP）；简单理解这个调度器跟 Nginx 的反向代理服务、DNS 的域名解析实现的是同样功能，对外提供统一虚拟 IP，实际用户访问的是 LVS 通过转发请求到指定服务器上的应用。")]),_._v(" "),v("h4",{attrs:{id:"_1-2-服务器池"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-服务器池"}},[_._v("#")]),_._v(" 1.2.服务器池")]),_._v(" "),v("p",[_._v("一组真正执行客户请求的服务器，执行的服务一般有 Web、Mail、FTP 和 DNS 等。")]),_._v(" "),v("h4",{attrs:{id:"_1-3-共享存储"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-共享存储"}},[_._v("#")]),_._v(" 1.3.共享存储")]),_._v(" "),v("p",[_._v("为服务器池提供一个共享的存储区，使服务器池拥有相同的内容，提供相同的服务；这也是 LVS 跟 Nginx 的区别：LVS 可通过共享存储结构实现多个应用服务器间的 Session 共享。")]),_._v(" "),v("h3",{attrs:{id:"_2-实现原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现原理"}},[_._v("#")]),_._v(" 2.实现原理")]),_._v(" "),v("p",[_._v("LVS 实现负载均衡主要有 VS/NAT、VS/TUN、VS/DR 三种方式")]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",[_._v("负载均衡")]),_._v(" "),v("th",[_._v("NAT")]),_._v(" "),v("th",[_._v("TUN")]),_._v(" "),v("th",[_._v("DR")])])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("服务器")]),_._v(" "),v("td",[_._v("Any")]),_._v(" "),v("td",[_._v("打开 Tunneling")]),_._v(" "),v("td",[_._v("Non-arp device")])]),_._v(" "),v("tr",[v("td",[_._v("网络")]),_._v(" "),v("td",[_._v("Private")]),_._v(" "),v("td",[_._v("LAN/WAN")]),_._v(" "),v("td",[_._v("LAN")])]),_._v(" "),v("tr",[v("td",[_._v("数量")]),_._v(" "),v("td",[_._v("Low（10-20）")]),_._v(" "),v("td",[_._v("High（100）")]),_._v(" "),v("td",[_._v("High（100）")])]),_._v(" "),v("tr",[v("td",[_._v("网关")]),_._v(" "),v("td",[_._v("load balancer")]),_._v(" "),v("td",[_._v("own router")]),_._v(" "),v("td",[_._v("own router")])])])])])}),[],!1,null,null,null);v.default=r.exports}}]);