(window.webpackJsonp=window.webpackJsonp||[]).push([[173],{490:function(t,v,_){"use strict";_.r(v);var r=_(3),e=Object(r.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("p",[t._v("正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配；Python 自 1.5 版本起增加了 re 模块，它提供 Perl 风格的正则表达式模式。")]),t._v(" "),v("p",[t._v("re 模块使 Python 语言拥有全部的正则表达式功能，compile 函数根据一个模式字符串和可选的标志参数生成一个正则表达式对象。该对象拥有一系列方法用于正则表达式匹配和替换；re 模块也提供了与这些方法功能完全一致的函数，这些函数使用一个模式字符串做为它们的第一个参数。")]),t._v(" "),v("h2",{attrs:{id:"re-match函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#re-match函数"}},[t._v("#")]),t._v(" re.match函数")]),t._v(" "),v("p",[t._v("re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。\n函数语法：")]),t._v(" "),v("p",[v("code",[t._v("re.match(pattern, string, flags=0)")]),t._v("\n函数参数说明：")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("参数")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("pattern")]),t._v(" "),v("td",[t._v("匹配的正则表达式")])]),t._v(" "),v("tr",[v("td",[t._v("string")]),t._v(" "),v("td",[t._v("要匹配的字符串")])]),t._v(" "),v("tr",[v("td",[t._v("flags")]),t._v(" "),v("td",[t._v("标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：正则表达式修饰符 - 可选标志。")])])])]),t._v(" "),v("p",[t._v("匹配成功 re.match 方法返回一个匹配的对象，否则返回 None；")]),t._v(" "),v("p",[t._v("我们可以使用 group(num) 或 groups() 匹配对象函数来获取匹配表达式。")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("匹配对象方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("group(num=0)")]),t._v(" "),v("td",[t._v("匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。")])]),t._v(" "),v("tr",[v("td",[t._v("groups()")]),t._v(" "),v("td",[t._v("返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。")])])])])])}),[],!1,null,null,null);v.default=e.exports}}]);