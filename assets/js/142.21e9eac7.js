(window.webpackJsonp=window.webpackJsonp||[]).push([[142],{455:function(r,a,v){"use strict";v.r(a);var _=v(3),t=Object(_.a)({},(function(){var r=this,a=r._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[a("p",[r._v("消息中间件是基于队列与消息传递技术，在网络环境中为应用系统提供"),a("strong",[r._v("同步或异步、可靠的")]),r._v("消息传输的支撑性软件系统。\n消息中间件利用"),a("strong",[r._v("高效可靠")]),r._v("的消息传递机制进行平台无关的数据交流，并基于数据通信来进行分布式系统的集成。通过提供消息传递和消息排队模型，它可以在分布式环境下扩展进程间的通信。")]),r._v(" "),a("h2",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[r._v("#")]),r._v(" 简介")]),r._v(" "),a("p",[r._v("Kafka 是一个分布式的流式处理平台，它以高吞吐、可持久化、可水平扩展、支持流数据处理等多种特性而被广泛使用")]),r._v(" "),a("p",[a("img",{attrs:{src:"https://f.pz.al/pzal/2023/01/13/8743b966ab55f.jpg",alt:""}}),r._v("\n主要功能体现于三点：")]),r._v(" "),a("ul",[a("li",[a("strong",[r._v("存储系统")]),r._v("：kafka 把消息持久化到磁盘，相比于其他基于内存存储的系统而言，有效的降低了消息丢失的风险。这得益于其消息持久化和多副本机制。也可以将 kafka 作为长期的存储系统来使用，只需要把对应的数据保留策略设置为“永久”或启用主题日志压缩功能。")]),r._v(" "),a("li",[a("strong",[r._v("消息系统")]),r._v("：kafka 与传统的消息中间件都具备系统解耦、冗余存储、流量削峰、缓冲、异步通信、扩展性、可恢复性等功能。与此同时，kafka 还提供了大多数消息系统难以实现的消息顺序性保障及回溯性消费的功能。")]),r._v(" "),a("li",[a("strong",[r._v("流式处理平台")]),r._v("：kafka 为流行的流式处理框架提供了可靠的数据来源，还提供了一个完整的流式处理框架，比如窗口、连接、变换和聚合等各类操作。")])]),r._v(" "),a("h2",{attrs:{id:"优势"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优势"}},[r._v("#")]),r._v(" 优势")]),r._v(" "),a("ul",[a("li",[r._v("支持多语言，Java优先")]),r._v(" "),a("li",[r._v("单机吞吐量：十万级")]),r._v(" "),a("li",[r._v("消息延迟：毫秒级")]),r._v(" "),a("li",[r._v("可用性非常高（分布式）")]),r._v(" "),a("li",[r._v("消息理论上不会丢失")]),r._v(" "),a("li",[r._v("消息理论上不会丢失")]),r._v(" "),a("li",[r._v("支持事务")])]),r._v(" "),a("h2",{attrs:{id:"构架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构架"}},[r._v("#")]),r._v(" 构架")]),r._v(" "),a("p",[r._v("一个典型的 kafka 体系架构包括若干 Producer、若干 Consumer、以及一个 Zookeeper 集群（在 2.8.0 版本中移除了 Zookeeper,通过 KRaft 进行自己的集群管理）\nProducer 将消息发送到 Broker，Broker 负责将受到的消息存储到磁盘中，而 Consumer 负责从 Broker 订阅并消费消息。\n"),a("img",{attrs:{src:"https://f.pz.al/pzal/2023/01/13/6568781429168.jpg",alt:""}})]),r._v(" "),a("h2",{attrs:{id:"概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[r._v("#")]),r._v(" 概念")]),r._v(" "),a("p",[a("strong",[r._v("Producer")]),r._v("：生产者，负责将消息发送到 Broker\n"),a("strong",[r._v("Consumer")]),r._v("：消费者，从 Broker 接收消息\n"),a("strong",[r._v("Consumer Group")]),r._v("：消费者组，由多个 Consumer 组成。消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费；消费者组之间互不影响。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。\n"),a("strong",[r._v("Broker")]),r._v("：可以看做一个独立的 Kafka 服务节点或 Kafka 服务实例。如果一台服务器上只部署了一个 Kafka 实例，那么我们也可以将 Broker 看做一台 Kafka 服务器。\n"),a("strong",[r._v("Topic")]),r._v("：一个逻辑上的概念，包含很多 Partition，同一个 Topic 下的 Partiton 的消息内容是不相同的。\n"),a("strong",[r._v("Partition")]),r._v("：为了实现扩展性，一个非常大的 topic 可以分布到多个 broker 上，一个 topic 可以分为多个 partition，每个 partition 是一个有序的队列。\n"),a("strong",[r._v("Replica")]),r._v("：副本，同一分区的不同副本保存的是相同的消息，为保证集群中的某个节点发生故障时，该节点上的 partition 数据不丢失，且 kafka 仍然能够继续工作，kafka 提供了副本机制，一个 topic 的每个分区都有若干个副本，一个 leader 和若干个 follower。\n"),a("strong",[r._v("Leader")]),r._v('：每个分区的多个副本中的"主副本"，生产者以及消费者只与 Leader 交互。\n'),a("strong",[r._v("Follower")]),r._v('：每个分区的多个副本中的"从副本"，负责实时从 Leader 中同步数据，保持和 Leader 数据的同步。Leader 发生故障时，从 Follower 副本中重新选举新的 Leader 副本对外提供服务。')]),r._v(" "),a("h2",{attrs:{id:"负载均衡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡"}},[r._v("#")]),r._v(" 负载均衡")]),r._v(" "),a("p",[r._v("Kafka 的负责均衡主要是通过分区来实现的")]),r._v(" "),a("ul",[a("li",[r._v("broker 端分配不均")])]),r._v(" "),a("p",[r._v("当创建 topic 的时候可能会出现某些 broker 分配到的分区数多，而有些 broker 分配的分区少，这就导致了 leader 多副本不均")]),r._v(" "),a("ul",[a("li",[r._v("生产者写入消息不均")])]),r._v(" "),a("p",[r._v("生产者可能只对某些 broker 中的 leader 副本进行大量的写入操作，而对其他的 leader 副本不闻不问。")]),r._v(" "),a("ul",[a("li",[r._v("消费者消费不均")])]),r._v(" "),a("p",[r._v("消费者可能只对某些 broker 中的 leader 副本进行大量的拉取操作，而对其他的 leader 副本不闻不问")]),r._v(" "),a("ul",[a("li",[r._v("leader 副本切换不均")])]),r._v(" "),a("p",[r._v("当主从副本切换或者分区副本进行了重分配后，可能会导致各个 broker 中的 leader 副本分配不均匀")]),r._v(" "),a("h2",{attrs:{id:"消费方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消费方式"}},[r._v("#")]),r._v(" 消费方式")]),r._v(" "),a("ul",[a("li",[r._v("点对点")]),r._v(" "),a("li",[r._v("发布订阅")])]),r._v(" "),a("p",[r._v("顺序读写\nPage Cache\n零拷贝\n分区分段 & 索引\n批量读写\n批量压缩")])])}),[],!1,null,null,null);a.default=t.exports}}]);