(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{432:function(t,s,a){"use strict";a.r(s);var e=a(3),v=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"多路复用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多路复用"}},[t._v("#")]),t._v(" 多路复用")]),t._v(" "),s("p",[t._v("顾名思义，多条网络连接复用一个进（线）程来处理请求")]),t._v(" "),s("h2",{attrs:{id:"内存优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存优化"}},[t._v("#")]),t._v(" 内存优化")]),t._v(" "),s("ul",[s("li",[t._v("尽可能使用哈希表（hash 数据结构）")])]),t._v(" "),s("p",[t._v("Redis 在储存小于 100 个字段的 Hash 结构上，其存储效率是非常高的；所以在不需要集合（set）操作或 list 的 push/pop 操作的时候，尽可能使用 hash 结构")]),t._v(" "),s("ul",[s("li",[t._v("根据业务场景，考虑使用 BitMap")]),t._v(" "),s("li",[t._v("充分利用共享对象池")])]),t._v(" "),s("p",[t._v("Redis 启动时会自动创建【0-9999】的整数对象池，对于 0-9999的内部整数类型的元素，整数值对象都会直接引用整数对象池中的对象，因此尽量使用 0-9999 整数对象可节省内存")]),t._v(" "),s("ul",[s("li",[t._v("合理使用内存回收策略")])]),t._v(" "),s("p",[t._v("过期数据清除、expire 设置数据过期时间等")])])}),[],!1,null,null,null);s.default=v.exports}}]);