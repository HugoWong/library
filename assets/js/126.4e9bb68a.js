(window.webpackJsonp=window.webpackJsonp||[]).push([[126],{439:function(s,a,t){"use strict";t.r(a);var n=t(3),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("MySQL 事务主要用于处理操作量大，复杂度高的数据")]),s._v(" "),a("h2",{attrs:{id:"说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说明"}},[s._v("#")]),s._v(" 说明")]),s._v(" "),a("ul",[a("li",[s._v("在 MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务")]),s._v(" "),a("li",[s._v("事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。")]),s._v(" "),a("li",[s._v("事务用来管理 INSERT、UPDATE、DELETE 语句")])]),s._v(" "),a("h2",{attrs:{id:"条件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#条件"}},[s._v("#")]),s._v(" 条件")]),s._v(" "),a("h3",{attrs:{id:"原子性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原子性"}},[s._v("#")]),s._v(" 原子性")]),s._v(" "),a("p",[s._v("Atomicity：每个事务（Transaction）都看作最小逻辑操作，不可进行分割；执行错误，会被回滚（Rollback）到事务开始前")]),s._v(" "),a("h3",{attrs:{id:"一致性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一致性"}},[s._v("#")]),s._v(" 一致性")]),s._v(" "),a("p",[s._v("Consistency：在事务开始之前和事务结束以后，数据库的完整性没有被破坏")]),s._v(" "),a("h3",{attrs:{id:"隔离性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隔离性"}},[s._v("#")]),s._v(" 隔离性")]),s._v(" "),a("p",[s._v("Isolation：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。")]),s._v(" "),a("ul",[a("li",[s._v("读未提交（Read Uncommitted）：允许脏读取，但不允许更新丢失；通过“排他写锁”实现")]),s._v(" "),a("li",[s._v("读提交（Read Committed）：不可重复读取，但不允许脏读取；通过“瞬间共享读锁”和“排他写锁”实现")]),s._v(" "),a("li",[s._v("可重复读（Repeatable Read）：禁止不可重复读取和脏读取，但是有时可能出现幻读数据；通过“共享读锁”和“排他写锁”实现")]),s._v(" "),a("li",[s._v("序列化（Serializable）：提供严格的事务隔离。它要求事务序列化执行，事务只能一个接着一个地执行，不能并发执行")])]),s._v(" "),a("h3",{attrs:{id:"持久性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#持久性"}},[s._v("#")]),s._v(" 持久性")]),s._v(" "),a("p",[s._v("Durability：当事务执行完毕（事务提交），该操作将永久的改变了数据库中的数据")]),s._v(" "),a("h2",{attrs:{id:"语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语句"}},[s._v("#")]),s._v(" 语句")]),s._v(" "),a("div",{staticClass:"language-basic line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-basic"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("BEGIN")]),s._v(" 或 START TRANSACTION 显式地开启一个事务；\nCOMMIT 也可以使用 COMMIT WORK，不过二者是等价的。COMMIT 会提交事务，并使已对数据库进行的所有修改成为永久性的；\nROLLBACK 也可以使用 ROLLBACK WORK，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；\nSAVEPOINT identifier，SAVEPOINT 允许在事务中创建一个保存点，一个事务中可以有多个 SAVEPOINT；\nRELEASE SAVEPOINT identifier 删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；\nROLLBACK "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TO")]),s._v(" identifier 把事务回滚到标记点；\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("SET")]),s._v(" TRANSACTION 用来设置事务的隔离级别。InnoDB 存储引擎提供事务的隔离级别有"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("READ")]),s._v(" UNCOMMITTED、"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("READ")]),s._v(" COMMITTED、REPEATABLE "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("READ")]),s._v(" 和 SERIALIZABLE。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h2",{attrs:{id:"方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[s._v("#")]),s._v(" 方法")]),s._v(" "),a("h3",{attrs:{id:"手动提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手动提交"}},[s._v("#")]),s._v(" 手动提交")]),s._v(" "),a("p",[s._v("用 BEGIN、ROLLBACK、COMMIT 来实现")]),s._v(" "),a("div",{staticClass:"language-basic line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-basic"}},[a("code",[s._v("#开始一个事务\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("BEGIN")]),s._v("\n#事务回滚\nROLLBACK\n#事务确认\nCOMMIT\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"自动提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动提交"}},[s._v("#")]),s._v(" 自动提交")]),s._v(" "),a("p",[s._v("直接用 SET 来改变 MySQL 的自动提交模式")]),s._v(" "),a("div",{staticClass:"language-basic line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-basic"}},[a("code",[s._v("禁止自动提交\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("SET")]),s._v(" AUTOCOMMIT"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n开启自动提交\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("SET")]),s._v(" AUTOCOMMIT"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])])}),[],!1,null,null,null);a.default=e.exports}}]);