(window.webpackJsonp=window.webpackJsonp||[]).push([[133],{446:function(s,a,t){"use strict";t.r(a);var e=t(3),n=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[a("img",{attrs:{src:"https://f.pz.al/pzal/2023/01/13/f3cf56cba2f14.jpg",alt:""}})]),s._v(" "),a("h2",{attrs:{id:"基本信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本信息"}},[s._v("#")]),s._v(" 基本信息")]),s._v(" "),a("p",[s._v("Redis （Remote Dictionary Server）是一个开源（BSD 许可）的、基于内存的、多数据结构、键值对型的数据存储系统，常被用作数据库、缓存和消息中间件；\n它可以使用客户端分片来扩展写性能，内置了：复制 （replication）、LUA 脚本（Lua scripting）、LRU 驱动事件（LRU eviction）、事务（transactions）和不同级别的磁盘持久化（persistence）， 并通过 Redis 哨兵（Sentinel）和自动分区（Cluster）实现高可用（high availability）集群方案。")]),s._v(" "),a("h3",{attrs:{id:"服务特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务特性"}},[s._v("#")]),s._v(" 服务特性")]),s._v(" "),a("ul",[a("li",[s._v("完全基于内存操作，性能极高，读写速度快")]),s._v(" "),a("li",[s._v("支持多种数据类型 - string、Hash、list、set、sorted set")]),s._v(" "),a("li",[s._v("支持多种数据淘汰策略")])]),s._v(" "),a("blockquote",[a("p",[s._v("volatile-lru：从已设置过期时间的数据集中挑选最近最少使用的数据淘汰\nvolatile-ttl ：从已设置过期时间的数据集中挑选将要过期的数据淘汰\nvolatile-random：从已设置过期时间的数据集中任意选择数据淘汰\nallkeys-lru：从所有数据集中挑选最近最少使用的数据淘汰\nallkeys-random：从所有数据集中任意选择数据进行淘汰\nnoeviction ：禁止驱逐数据")])]),s._v(" "),a("ul",[a("li",[s._v("提供多种持久化操作：RDB 和 AOF 以及混合模式")]),s._v(" "),a("li",[s._v("支持主从模式，支持读写分离与分布式，能通过 Redis Cluster 提供集群模式")])]),s._v(" "),a("h3",{attrs:{id:"性能优势"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能优势"}},[s._v("#")]),s._v(" 性能优势")]),s._v(" "),a("ul",[a("li",[s._v("完全基于内存")]),s._v(" "),a("li",[s._v("数据结构简单，操作方便，并且不同数据结构能够应对于不同场景")]),s._v(" "),a("li",[s._v("采用单线程（网络请求模块使用单线程，其他模块仍用了多线程），避免了不必要的上下文切换和竞争条件，也不存在多进程或多线程切换导致 CPU 消耗，不需要考虑各种锁的问题。")]),s._v(" "),a("li",[s._v("使用多路 I/O 复用模型，为非阻塞 I/O")]),s._v(" "),a("li",[s._v("Redis 本身设定了 VM 机制，没有使用 OS 的 Swap，可以实现冷热数据分离，避免因为内存不足而造成访问速度下降的问题")])]),s._v(" "),a("h3",{attrs:{id:"数据淘汰"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据淘汰"}},[s._v("#")]),s._v(" 数据淘汰")]),s._v(" "),a("p",[s._v("Redis 有两种方式实现缓存淘汰：")]),s._v(" "),a("ul",[a("li",[s._v("消极方式：访问 Redis Key 时，发现失效就删除")]),s._v(" "),a("li",[s._v("积极方式：周期性从设置了失效时间的 Key 中，根据淘汰策略，删除一部分失效的 Key。")])]),s._v(" "),a("h3",{attrs:{id:"存储分区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存储分区"}},[s._v("#")]),s._v(" 存储分区")]),s._v(" "),a("p",[s._v("Redis Cluster 集群包含 16384 个虚拟 Hash 槽，它通过一个高效的算法来计算 Key 属于哪个 Hash 槽；\nRedis Cluster 支持请求分发 - 节点在接到一个命令请求时，会先检测这个命令请求要处理的键所在的槽是否由自己负责，如果不是的话，节点将向客户端返回一个 MOVED 错误，MOVED 错误携带的信息可以指引客户端将请求重定向至正在负责相关槽的节点。")]),s._v(" "),a("h3",{attrs:{id:"主从复制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主从复制"}},[s._v("#")]),s._v(" 主从复制")]),s._v(" "),a("p",[s._v("Redis 2.8 后支持异步复制，有两种模式：\n完整重同步(full resychronization)：用于初次复制，执行步骤与 SYNC 命令基本一致。\n部分重同步(partial resychronization)：用于断线后重复制，如果条件允许，主服务器可以将主从服务器连接断开期间执行的写命令发送给从服务器，从服务器只需接收并执行这些写命令，即可将主从服务器的数据库状态保持一致。\n集群中每个节点都会定期向集群中的其他节点发送 PING 消息，以此来检测对方是否在线；\n如果一个主节点被认为下线，则在其从节点中，根据 Raft 算法，选举出一个节点，升级为主节点。")]),s._v(" "),a("h3",{attrs:{id:"数据一致"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据一致"}},[s._v("#")]),s._v(" 数据一致")]),s._v(" "),a("p",[s._v("Redis 不保证强一致性，因为这会使得集群性能大大降低，它是通过异步复制来实现最终一致性")]),s._v(" "),a("h2",{attrs:{id:"数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[s._v("#")]),s._v(" 数据结构")]),s._v(" "),a("p",[s._v("Redis 存储的所有数据都是以唯一的 key 字符串作为名称，以及与之相应的 Value 数据；它有五种基础数据结构，分别为：string（字符串）、list（列表）、hash（字典）、set（合集）和 zset（有序合集）")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[s._v("数据类型")])]),s._v(" "),a("th",[a("strong",[s._v("可存储的值")])]),s._v(" "),a("th",[a("strong",[s._v("操作")])])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("STRING")]),s._v(" "),a("td",[s._v("字符串、整数或者浮点数")]),s._v(" "),a("td",[s._v("对整个字符串或者字符串的其中一部分执行操作")])]),s._v(" "),a("tr",[a("td",[s._v("对整数和浮点数执行自增或者自减操作")]),s._v(" "),a("td"),s._v(" "),a("td")]),s._v(" "),a("tr",[a("td",[s._v("LIST")]),s._v(" "),a("td",[s._v("列表")]),s._v(" "),a("td",[s._v("从两端压入或者弹出元素")])])])]),s._v(" "),a("p",[s._v("对单个或者多个元素进行修剪\n只保留一个范围内的元素 |\n| SET | 无序集合 | 添加、获取、移除单个元素\n检查一个元素是否存在于集合中\n计算交集、并集、差集\n从集合里面随机获取元素 |\n| HASH | 包含键值对的无序散列表 | 添加、获取、移除单个键值对\n获取所有键值对\n检查某个键是否存在 |\n| ZSET | 有序集合 | 添加、获取、删除元素\n根据分值范围或者成员来获取元素\n计算一个键的排名 |")]),s._v(" "),a("h3",{attrs:{id:"string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[s._v("#")]),s._v(" string")]),s._v(" "),a("p",[s._v("字符串是 Redis 最简单的数据结构，它的内部就是一个字符串数组；用途非常广泛，常见的如缓存用户信息\nRedis 的字符串是动态字符串，可以修改，采用预分配冗余空间的方式来减少内存的频繁分配；一般分配的空间会高于实际字符串长度（容量） len。\n当字符串长度（容量）小于 1MB 时，扩容都是加倍现有的空间；如果长度（容量）超过 1MB，扩容时一次只会多扩 1MB 。\n"),a("strong",[s._v("字符串最大长度（容量）为 512MB。")])]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#设置")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" name junyu\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#获取")]),s._v("\nget name\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#校验")]),s._v("\nexists name\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#删除")]),s._v("\ndel name\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#批量设置")]),s._v("\nmset name junyu age "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#批量获取")]),s._v("\nmget name age\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h3",{attrs:{id:"list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[s._v("#")]),s._v(" list")]),s._v(" "),a("p",[s._v("Redis 的列表是链表不是数组，意味着 list 的插入和删除操作非常快，时间复杂度为 O (1)；但索引定位很慢，时间复杂度为 O (n)。\n列表中的每一个元素都可以使用双向指针顺序，串起来可以同时支持向前或向后遍历；当列表弹出最后一个元素之后，该数据结构被自动删除，内存被回收。\nRedis 的列表常用来做异步队列使用，将需要延后处理的任务结构体序列化成字符串，塞进 Redis 列表中，另一个线程从这个列表中轮询数据进行处理。")]),s._v(" "),a("ul",[a("li",[s._v("队列：先进先出的数据结构，常用于消息队列异步逻辑处理，确保元素的访问顺序性")])]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#创建，入操作")]),s._v("\nrpush l A B C\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#统计长度")]),s._v("\nllen\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#出操作")]),s._v("\nlpop\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("ul",[a("li",[s._v("栈：先进后出的数据结构，跟队列正好相反（业务场景）")])]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#创建，入操作")]),s._v("\nrpush l A B C\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#出操作")]),s._v("\nrpop\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"hash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[s._v("#")]),s._v(" hash")]),s._v(" "),a("p",[s._v("Redis 的字典是无序字典，内部存储了很多键值对；都是 “数组 + 链表”的二维结构，采用了渐进式 rehash 的策略。\n渐进式 rehash 会在 rehash 的同时，保留新旧两个 hash 结构，查询时会同时查询两个 hash 结构，然后在后续的定时任务或操作指令中，渐进的将旧的 Hash 内容一点点移动到新的 Hash 结构中。当移动完成，就会使用新的 hash 结构代替。\n当 hash 移除最后一个元素之后，该数据结构会被自动删除，内存被回收。\nhash 结构也可以用于存储用户信息，并且不需要序列化，可以直接对用户的每个字段单独存储。当我们需要获取用户信息时可以部分获取，而以字符串存储用户信息只能全部读取，这样会浪费网络流量。\nhash 也有缺点，hash 结构的存储消耗要远高于单个字符串，到底该使用 hash 还是字符串，应该根据实际情况再三权衡。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("hset\nhlen\nhget\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[s._v("#")]),s._v(" set")]),s._v(" "),a("p",[s._v("Redis 的集合内部键值对是无序的，唯一的；相当于一个特殊的字典，字典中所有的 Value 值都是 NULL。\n因为有去重功能，set 可以用来存储活动中奖的用户 ID，可以确保同一用户不会多次中将。\n当集合中最后一个元素被移除后，数据结构被自动删除，内存被回收。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#添加条目")]),s._v("\nsadd\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#查看集合（无序）")]),s._v("\nsmembers\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#获取长度")]),s._v("\nscard\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#出操作")]),s._v("\nspop\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h3",{attrs:{id:"zset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zset"}},[s._v("#")]),s._v(" zset")]),s._v(" "),a("p",[s._v("zset 可能是 Redis 中提供的最具有特色的数据结构，叫“跳跃列表”；一方面它是一个 set 保证了内部 Value 唯一性，另一方面它可以给每一个内部 Value 赋予一个 score，代表这个 value 的排位权重。")]),s._v(" "),a("ul",[a("li",[s._v("存储粉丝列表，value 存粉丝 ID，score 为关注时间，按照关注时间进行排序")]),s._v(" "),a("li",[s._v("存储学生成绩，value 存学生 ID，score 为考试成绩，按照分数排名得到名次")])]),s._v(" "),a("p",[s._v("zset 中的最后一个 value 被移除后，数据结构被自动删除，内存被回收。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#插入数据")]),s._v("\nzadd demo "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"aaa"')]),s._v("\nzadd demo "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"bbb"')]),s._v("\nzadd demo "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ccc"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#按 score 顺序列出")]),s._v("\nzrange demo "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#按 score 逆序列出")]),s._v("\nzrevrange demo "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#计数")]),s._v("\nzcard demo\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#获取指定 value 的 score 值")]),s._v("\nzscore demo "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ccc"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#获取 value 的排名（从 0 开始）")]),s._v("\nzrank demo "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ccc"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除 value")]),s._v("\nzrem demo "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ccc"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h2",{attrs:{id:"通用规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通用规则"}},[s._v("#")]),s._v(" 通用规则")]),s._v(" "),a("p",[s._v("list、set、hash、set 这四种数据结构是容器型的数据结构，它们共享下面两条通用的规则：")]),s._v(" "),a("ul",[a("li",[s._v("create if not exists：容器不存在，那就创建一个，在进行操作")]),s._v(" "),a("li",[s._v("drop if no elements：容器为空，立即自动删除容器，释放缓存")])]),s._v(" "),a("h2",{attrs:{id:"生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[s._v("#")]),s._v(" 生命周期")]),s._v(" "),a("p",[s._v("Redis 的所有数据都可以已对象为单位设置过期时间，时间一过自动删除相应的对象；都已经存在的对象使用了 set 方法过期时间会取消。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#设置过期时间")]),s._v("\nexpire demo "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#查看剩余时间")]),s._v("\nttl demo\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"性能测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能测试"}},[s._v("#")]),s._v(" 性能测试")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("redis-benchmark "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-q")]),s._v("\nredis-benchmark "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-h")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),s._v(" set,lpush "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-q")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])])}),[],!1,null,null,null);a.default=n.exports}}]);