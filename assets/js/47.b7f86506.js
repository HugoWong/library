(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{363:function(t,a,r){"use strict";r.r(a);var s=r(3),e=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("一种用于构建应用的架构方案，是松散耦合的分布式架构框架；一批独立运行的服务共同构建起系统，每个服务独自运行，通过特定的机制进行通信，例如 REST（REpresentational State Transfer：表现层状态转移）API、RPC；单独服务的更改不会影响整个应用，开发团队能够快速构建应用的新组件，以满足不断变化的业务需求。\n"),a("strong",[t._v("有助于更好实现 DevOps 的技术，并让持续集成和持续交付（CI/CD）更加顺畅、容易实现。")])]),t._v(" "),a("h2",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),a("h3",{attrs:{id:"特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),a("ul",[a("li",[t._v("针对特定服务发布，影响小，风险小，成本低")]),t._v(" "),a("li",[t._v("频繁发布版本，快速持续迭代")]),t._v(" "),a("li",[t._v("低成本扩容，弹性伸缩")])]),t._v(" "),a("h3",{attrs:{id:"优势"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优势"}},[t._v("#")]),t._v(" 优势")]),t._v(" "),a("ul",[a("li",[t._v("开发周期短")]),t._v(" "),a("li",[t._v("高度可扩展")]),t._v(" "),a("li",[t._v("出色的弹性")]),t._v(" "),a("li",[t._v("易于部署")]),t._v(" "),a("li",[t._v("易于访问")]),t._v(" "),a("li",[t._v("更加开放")])]),t._v(" "),a("h2",{attrs:{id:"模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块"}},[t._v("#")]),t._v(" 模块")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://f.pz.al/pzal/2023/01/13/de5b1b86f24f0.jpg",alt:"微服务架构"}}),a("br"),t._v(" "),a("img",{attrs:{src:"https://f.pz.al/pzal/2023/01/13/54c659a130285.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"api-网关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api-网关"}},[t._v("#")]),t._v(" API 网关")]),t._v(" "),a("p",[t._v("API 网关是一个服务器，是系统的单入口点，它类似于面向对象设计模式中的门面（Facade）模式；API 网关封装了内部系统架构，并针对每个客户端提供一个定制 API；它还可用于认证、监控、负载均衡、缓存和静态响应处理。\nAPI 网关负责请求路由、组合和协议转换：所有客户端请求首先要通过 API 网关，之后请求被路由到适当的服务；API 网关通常会通过调用多个微服务来处理一个请求并聚合结果，它可以在 Web 协议（如 HTTP 和 WebSocket）和用于内部的非 Web 友好协议之间进行转换。")]),t._v(" "),a("h4",{attrs:{id:"技术选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#技术选择"}},[t._v("#")]),t._v(" 技术选择")]),t._v(" "),a("p",[t._v("平台要求：支持异步、非阻塞 I/O")]),t._v(" "),a("ul",[a("li",[t._v("在 JVM 上，可以使用基于 "),a("code",[t._v("NIO")]),t._v(" 的框架")]),t._v(" "),a("li",[t._v("非 JVM 可以使用 "),a("code",[t._v("Node.js")])]),t._v(" "),a("li",[t._v("还可以选择使用 Nginx")])]),t._v(" "),a("h4",{attrs:{id:"编程模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编程模型"}},[t._v("#")]),t._v(" 编程模型")]),t._v(" "),a("p",[t._v("传统的异步回调方式来编写 API 组合代码会很快陷入回调地狱，代码将会变得杂乱、难以理解并且容易出错；想要构建简单而高效的 API 网关，更好的方式是使用响应式方法以"),a("strong",[t._v("声明式")]),t._v("方式去编写 API 网关代码")]),t._v(" "),a("ul",[a("li",[t._v("Future&CompletableFuture（Java8）")]),t._v(" "),a("li",[t._v("Promise（ES6）")]),t._v(" "),a("li",[t._v("RxJS（JavaScript）")])]),t._v(" "),a("h4",{attrs:{id:"服务调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务调用"}},[t._v("#")]),t._v(" 服务调用")]),t._v(" "),a("p",[t._v("基于微服务的应用是一个分布式系统，必须使用进程间（inter-process）通信机制，系统通常会同时使用异步和同步两种方式，甚至可以为每种方式应用多个实现；因此，API 网关需要支持各种通信机制。")]),t._v(" "),a("h4",{attrs:{id:"服务发现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务发现"}},[t._v("#")]),t._v(" 服务发现")]),t._v(" "),a("h4",{attrs:{id:"局部故障"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#局部故障"}},[t._v("#")]),t._v(" 局部故障")]),t._v(" "),a("h3",{attrs:{id:"注册发现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注册发现"}},[t._v("#")]),t._v(" 注册发现")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://f.pz.al/pzal/2023/01/13/596fa94a34ad4.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"配置管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置管理"}},[t._v("#")]),t._v(" 配置管理")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://f.pz.al/pzal/2023/01/13/13b0ee2d47573.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"网关入口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网关入口"}},[t._v("#")]),t._v(" 网关入口")]),t._v(" "),a("h2",{attrs:{id:"部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#部署"}},[t._v("#")]),t._v(" 部署")]),t._v(" "),a("blockquote",[a("p",[t._v("可以说"),a("code",[t._v("Kubernetes")]),t._v("、"),a("code",[t._v("Docker")]),t._v("这些技术就是为微服务而生的")])]),t._v(" "),a("p",[t._v("典型的企业应用由至少三种不同类型的组件组成：")]),t._v(" "),a("h3",{attrs:{id:"表现层-presentation-layer-pl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表现层-presentation-layer-pl"}},[t._v("#")]),t._v(" 表现层（Presentation Layer，PL）")]),t._v(" "),a("p",[t._v("处理 HTTP 请求并实现（REST）API 或基于 HTML 的 Web UI 组件")]),t._v(" "),a("h3",{attrs:{id:"业务逻辑层-business-logic-layer-bll"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#业务逻辑层-business-logic-layer-bll"}},[t._v("#")]),t._v(" 业务逻辑层（Business Logic Layer，BLL）")]),t._v(" "),a("p",[t._v("作为应用核心，实现业务规则的组件")]),t._v(" "),a("h3",{attrs:{id:"数据访问层-data-access-layer-dal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据访问层-data-access-layer-dal"}},[t._v("#")]),t._v(" 数据访问层（Data Access Layer，DAL）")]),t._v(" "),a("p",[t._v("数据访问基础设施组件，如数据库和消息代理")]),t._v(" "),a("h2",{attrs:{id:"教程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#教程"}},[t._v("#")]),t._v(" 教程")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/DocsHome/microservices",target:"_blank",rel:"noopener noreferrer"}},[t._v("《微服务：从入门到部署》"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"restful-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#restful-api"}},[t._v("#")]),t._v(" RESTful API")]),t._v(" "),a("blockquote",[a("p",[t._v("URL 定位资源，用 HTTP 动词（GET、POST、DELETE、DETC）描述操作")])]),t._v(" "),a("p",[a("a",{attrs:{href:"http://restful.p2hp.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://restful.p2hp.com/"),a("OutboundLink")],1),t._v("\nREST 是 "),a("strong",[t._v("RE")]),t._v("presentational "),a("strong",[t._v("S")]),t._v("tate "),a("strong",[t._v("T")]),t._v("ransfer（表现层状态转移）的首字母缩写，分布式超媒体系统的架构风格，最初由Roy Fielding 在 2000 年的着名"),a("a",{attrs:{href:"https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("论文"),a("OutboundLink")],1),t._v("中提出；RESTful 表示满足"),a("code",[t._v("REST")]),t._v("原则。")]),t._v(" "),a("ul",[a("li",[t._v("B/S")]),t._v(" "),a("li",[t._v("无状态")]),t._v(" "),a("li",[t._v("可缓存")]),t._v(" "),a("li",[t._v("统一界面")]),t._v(" "),a("li",[t._v("分层系统")]),t._v(" "),a("li",[t._v("按需代码（可选）")])]),t._v(" "),a("p",[t._v("URI（Uniform Resource Identifier）统一资源标志符，标识 Web 上每一种可用的资源，常见的 URL（统一资源定位符）只是它的一个子集")]),t._v(" "),a("ul",[a("li",[t._v("GET：查询")]),t._v(" "),a("li",[t._v("POST：新增")]),t._v(" "),a("li",[t._v("PUT：更新")]),t._v(" "),a("li",[t._v("DELETE：删除")])]),t._v(" "),a("p",[t._v("幂等性，即对该 URI 多少次操作，返回的结果都是相同的\n规范：\nUrl 知道要什么\nhttp method 知道干什么\nhttp status code 知道结果")])])}),[],!1,null,null,null);a.default=e.exports}}]);