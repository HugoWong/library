(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{372:function(_,t,v){"use strict";v.r(t);var a=v(3),r=Object(a.a)({},(function(){var _=this,t=_._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h2",{attrs:{id:"一、简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、简介"}},[_._v("#")]),_._v(" 一、简介")]),_._v(" "),t("p",[_._v("一种用于构建应用的架构方案，是松散耦合的分布式架构框架；一批独立运行的服务共同构建起系统，每个服务独自运行，通过特定的机制进行通信，例如：")]),_._v(" "),t("ul",[t("li",[_._v("RESTful")]),_._v(" "),t("li",[_._v("RPC")])]),_._v(" "),t("p",[_._v("单独服务的更改不会影响整个应用，开发团队能够快速构建应用的新组件，以满足不断变化的业务需求。")]),_._v(" "),t("p",[t("strong",[_._v("RESTful API")])]),_._v(" "),t("blockquote",[t("p",[_._v("URL 定位资源，用 HTTP 动词（GET、POST、DELETE、DETC）描述操作")])]),_._v(" "),t("p",[t("a",{attrs:{href:"http://restful.p2hp.com/",target:"_blank",rel:"noopener noreferrer"}},[_._v("http://restful.p2hp.com/"),t("OutboundLink")],1),_._v("\nREST 是 "),t("strong",[_._v("RE")]),_._v("presentational "),t("strong",[_._v("S")]),_._v("tate "),t("strong",[_._v("T")]),_._v("ransfer（表现层状态转移）的首字母缩写，分布式超媒体系统的架构风格，最初由Roy Fielding 在 2000 年的着名"),t("a",{attrs:{href:"https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm",target:"_blank",rel:"noopener noreferrer"}},[_._v("论文"),t("OutboundLink")],1),_._v("中提出；RESTful 表示满足"),t("code",[_._v("REST")]),_._v("原则。")]),_._v(" "),t("ul",[t("li",[_._v("B/S")]),_._v(" "),t("li",[_._v("无状态")]),_._v(" "),t("li",[_._v("可缓存")]),_._v(" "),t("li",[_._v("统一界面")]),_._v(" "),t("li",[_._v("分层系统")]),_._v(" "),t("li",[_._v("按需代码（可选）")])]),_._v(" "),t("p",[_._v("URI（Uniform Resource Identifier）统一资源标志符，标识 Web 上每一种可用的资源，常见的 URL（统一资源定位符）只是它的一个子集")]),_._v(" "),t("ul",[t("li",[_._v("GET：查询")]),_._v(" "),t("li",[_._v("POST：新增")]),_._v(" "),t("li",[_._v("PUT：更新")]),_._v(" "),t("li",[_._v("DELETE：删除")])]),_._v(" "),t("p",[_._v("幂等性，即对该 URI 多少次操作，返回的结果都是相同的\n规范：\nUrl 知道要什么\nhttp method 知道干什么\nhttp status code 知道结果")]),_._v(" "),t("p",[t("strong",[_._v("有助于更好实现 DevOps 的技术，并让持续集成和持续交付（CI/CD）更加顺畅、容易实现。")])]),_._v(" "),t("h3",{attrs:{id:"_1-特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-特点"}},[_._v("#")]),_._v(" 1.特点")]),_._v(" "),t("ul",[t("li",[_._v("针对特定服务发布，影响小，风险小，成本低")]),_._v(" "),t("li",[_._v("频繁发布版本，快速持续迭代")]),_._v(" "),t("li",[_._v("低成本扩容，弹性伸缩")])]),_._v(" "),t("h3",{attrs:{id:"_2-优势"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-优势"}},[_._v("#")]),_._v(" 2.优势")]),_._v(" "),t("ul",[t("li",[_._v("开发周期短")]),_._v(" "),t("li",[_._v("高度可扩展")]),_._v(" "),t("li",[_._v("出色的弹性")]),_._v(" "),t("li",[_._v("易于部署")]),_._v(" "),t("li",[_._v("易于访问")]),_._v(" "),t("li",[_._v("更加开放")])]),_._v(" "),t("h2",{attrs:{id:"二、模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、模块"}},[_._v("#")]),_._v(" 二、模块")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://f.pz.al/pzal/2023/01/13/de5b1b86f24f0.jpg",alt:"微服务架构"}}),t("br"),_._v(" "),t("img",{attrs:{src:"https://f.pz.al/pzal/2023/01/13/54c659a130285.png",alt:""}})]),_._v(" "),t("h3",{attrs:{id:"_1-api-网关"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-api-网关"}},[_._v("#")]),_._v(" 1.API 网关")]),_._v(" "),t("p",[_._v("API 网关是一个服务器，是系统的单入口点，它类似于面向对象设计模式中的门面（Facade）模式；API 网关封装了内部系统架构，并针对每个客户端提供一个定制 API；它还可用于认证、监控、负载均衡、缓存和静态响应处理。")]),_._v(" "),t("p",[_._v("API 网关负责请求路由、组合和协议转换：所有客户端请求首先要通过 API 网关，之后请求被路由到适当的服务；API 网关通常会通过调用多个微服务来处理一个请求并聚合结果，它可以在 Web 协议（如 HTTP 和 WebSocket）和用于内部的非 Web 友好协议之间进行转换。")]),_._v(" "),t("h4",{attrs:{id:"_1-1-技术选择"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-技术选择"}},[_._v("#")]),_._v(" 1.1.技术选择")]),_._v(" "),t("p",[_._v("平台要求：支持异步、非阻塞 I/O")]),_._v(" "),t("ul",[t("li",[_._v("在 JVM 上，可以使用基于 "),t("code",[_._v("NIO")]),_._v(" 的框架")]),_._v(" "),t("li",[_._v("非 JVM 可以使用 "),t("code",[_._v("Node.js")])]),_._v(" "),t("li",[_._v("还可以选择使用 Nginx")])]),_._v(" "),t("h4",{attrs:{id:"_1-2-编程模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-编程模型"}},[_._v("#")]),_._v(" 1.2.编程模型")]),_._v(" "),t("p",[_._v("传统的异步回调方式来编写 API 组合代码会很快陷入回调地狱，代码将会变得杂乱、难以理解并且容易出错；想要构建简单而高效的 API 网关，更好的方式是使用响应式方法以"),t("strong",[_._v("声明式")]),_._v("方式去编写 API 网关代码")]),_._v(" "),t("ul",[t("li",[_._v("Future&CompletableFuture（Java8）")]),_._v(" "),t("li",[_._v("Promise（ES6）")]),_._v(" "),t("li",[_._v("RxJS（JavaScript）")])]),_._v(" "),t("h4",{attrs:{id:"_1-3-服务调用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-服务调用"}},[_._v("#")]),_._v(" 1.3.服务调用")]),_._v(" "),t("p",[_._v("基于微服务的应用是一个分布式系统，必须使用进程间（inter-process）通信机制，系统通常会同时使用异步和同步两种方式，甚至可以为每种方式应用多个实现；因此，API 网关需要支持各种通信机制。")]),_._v(" "),t("h4",{attrs:{id:"_1-4-服务发现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-服务发现"}},[_._v("#")]),_._v(" 1.4.服务发现")]),_._v(" "),t("h4",{attrs:{id:"_1-5-局部故障"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-局部故障"}},[_._v("#")]),_._v(" 1.5.局部故障")]),_._v(" "),t("h3",{attrs:{id:"_2-注册发现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-注册发现"}},[_._v("#")]),_._v(" 2.注册发现")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://f.pz.al/pzal/2023/01/13/596fa94a34ad4.png",alt:""}})]),_._v(" "),t("h3",{attrs:{id:"_3-配置管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-配置管理"}},[_._v("#")]),_._v(" 3.配置管理")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://f.pz.al/pzal/2023/01/13/13b0ee2d47573.png",alt:""}})]),_._v(" "),t("h3",{attrs:{id:"_4-网关入口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-网关入口"}},[_._v("#")]),_._v(" 4.网关入口")]),_._v(" "),t("h2",{attrs:{id:"三、部署"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、部署"}},[_._v("#")]),_._v(" 三、部署")]),_._v(" "),t("blockquote",[t("p",[_._v("可以说"),t("code",[_._v("Kubernetes")]),_._v("、"),t("code",[_._v("Docker")]),_._v("这些技术就是为微服务而生的")])]),_._v(" "),t("p",[_._v("典型的企业应用由至少三种不同类型的组件组成：")]),_._v(" "),t("ul",[t("li",[_._v("表现层（Presentation Layer，PL）")])]),_._v(" "),t("p",[_._v("处理 HTTP 请求并实现（REST）API 或基于 HTML 的 Web UI 组件")]),_._v(" "),t("ul",[t("li",[_._v("业务逻辑层（Business Logic Layer，BLL）")])]),_._v(" "),t("p",[_._v("作为应用核心，实现业务规则的组件")]),_._v(" "),t("ul",[t("li",[_._v("数据访问层（Data Access Layer，DAL）")])]),_._v(" "),t("p",[_._v("数据访问基础设施组件，如数据库和消息代理")]),_._v(" "),t("h2",{attrs:{id:"四、教程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、教程"}},[_._v("#")]),_._v(" 四、教程")]),_._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/DocsHome/microservices",target:"_blank",rel:"noopener noreferrer"}},[_._v("《微服务：从入门到部署》"),t("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=r.exports}}]);