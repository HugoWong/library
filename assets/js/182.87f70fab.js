(window.webpackJsonp=window.webpackJsonp||[]).push([[182],{500:function(t,r,e){"use strict";e.r(r);var a=e(3),v=Object(a.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("p",[t._v("正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配")]),t._v(" "),r("h2",{attrs:{id:"re-模块"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#re-模块"}},[t._v("#")]),t._v(" re 模块")]),t._v(" "),r("p",[t._v("Python 自 1.5 版本起增加了 re 模块替换过时的 regex 模块和 regsub 模块（2.5 移除），支持更强大通用的 Perl（Perl 5） 风格的正则表达式。")]),t._v(" "),r("p",[t._v("re 模块使 Python 语言拥有全部的正则表达式功能，允许多个线程共享同一个已编译的正则表达式对象，也支持命名子组")]),t._v(" "),r("h3",{attrs:{id:"re-compile"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#re-compile"}},[t._v("#")]),t._v(" re.compile()")]),t._v(" "),r("p",[t._v("编译正则表达式对象")]),t._v(" "),r("h3",{attrs:{id:"re-match"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#re-match"}},[t._v("#")]),t._v(" re.match()")]),t._v(" "),r("p",[t._v("re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match() 就返回 none。")]),t._v(" "),r("p",[t._v("函数语法："),r("code",[t._v("re.match(pattern, string, flags=0)")])]),t._v(" "),r("p",[t._v("函数参数说明：")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("参数")]),t._v(" "),r("th",[t._v("描述")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("pattern")]),t._v(" "),r("td",[t._v("匹配的正则表达式")])]),t._v(" "),r("tr",[r("td",[t._v("string")]),t._v(" "),r("td",[t._v("要匹配的字符串")])]),t._v(" "),r("tr",[r("td",[t._v("flags")]),t._v(" "),r("td",[t._v("标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：正则表达式修饰符 - 可选标志。")])])])]),t._v(" "),r("p",[t._v("匹配成功 re.match 方法返回一个匹配的对象，否则返回 None；")]),t._v(" "),r("p",[t._v("我们可以使用 group(num) 或 groups() 匹配对象函数来获取匹配表达式。")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("匹配对象方法")]),t._v(" "),r("th",[t._v("描述")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("group(num=0)")]),t._v(" "),r("td",[t._v("匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。")])]),t._v(" "),r("tr",[r("td",[t._v("groups()")]),t._v(" "),r("td",[t._v("返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。")])])])]),t._v(" "),r("h3",{attrs:{id:"re-search"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#re-search"}},[t._v("#")]),t._v(" re.search()")]),t._v(" "),r("p",[t._v("使用 re.search() 在一个字符串中查找模式")]),t._v(" "),r("h3",{attrs:{id:"re-findall"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#re-findall"}},[t._v("#")]),t._v(" re.findall()")]),t._v(" "),r("h3",{attrs:{id:"re-finditer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#re-finditer"}},[t._v("#")]),t._v(" re.finditer()")]),t._v(" "),r("h3",{attrs:{id:"re-sub"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#re-sub"}},[t._v("#")]),t._v(" re.sub()")]),t._v(" "),r("p",[t._v("搜索与替换")]),t._v(" "),r("h3",{attrs:{id:"re-subn"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#re-subn"}},[t._v("#")]),t._v(" re.subn()")]),t._v(" "),r("p",[t._v("搜索与替换")]),t._v(" "),r("h3",{attrs:{id:"re-split"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#re-split"}},[t._v("#")]),t._v(" re.split()")]),t._v(" "),r("p",[t._v("分割字符串")])])}),[],!1,null,null,null);r.default=v.exports}}]);